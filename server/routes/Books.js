const express = require("express");
const router = express.Router();
const mongoose = require('mongoose')
const UserBooks = require("../models/book.model"); // –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–∏
const fetch = require("node-fetch"); // –î–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤ Google API
const verifyToken = require("../middleware/auth"); // –ó–∞—â–∏—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤
mongoose.connect('mongodb://localhost:27017/book-app')

router.post("/books/add", verifyToken, async (req, res) => {
    const userId = req.user.userId; 
    const {bookId, title, author, cover, status } = req.body;
    try {
    let userBooks = await UserBooks.findOne({ userId });

    if (!userBooks) {
        userBooks = new UserBooks({ userId, books: [{ bookId, title, author, cover, status }] });
    } else {
        userBooks.books.push({ bookId, title, author, cover, status });
    }

    await userBooks.save();
    res.status(201).json({ message: "–ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!" });

    } catch (error) {
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
    }
});

// üìå –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get("/books/get", verifyToken, async (req, res) => {
    try {
        const userId = req.user.userId; 

        const userBooks = await UserBooks.findOne({ userId });

        if (!userBooks) {
            return res.status(404).json({ message: "‚ùå –ö–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!" });
        }

        res.json(userBooks.books);
    } catch (error) {
        res.status(500).json({ message: "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
    }
});

router.put('/books/update', verifyToken, async (req, res) => {
  try {
    const { bookId, status } = req.body;
    const userId = req.user.userId; 
    // –ù–∞—Ö–æ–¥–∏–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–∏–≥—É
    const updatedBook = await UserBooks.findOneAndUpdate(
      { userId, "books.bookId": bookId },
      { $set: { "books.$.status": status } },
      { new: true }
);


    if (!updatedBook) {
      return res.status(404).json({ message: "–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
    }

    res.json({ message: "–°—Ç–∞—Ç—É—Å –∫–Ω–∏–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω" });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// üìå –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.delete("/books/delete",  verifyToken, async (req, res) => {
    const userId = req.user.userId; 
    try {
        const { bookId } = req.body;


        const userBooks = await UserBooks.findOne({ userId });
        if (!userBooks) {
            return res.status(404).json({ message: "‚ùå –ö–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!" });
        }

        const initialCount = userBooks.books.length;
        // –§–∏–ª—å—Ç—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –∏ —É–¥–∞–ª—è–µ–º –∫–Ω–∏–≥—É —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º bookId
        userBooks.books = userBooks.books.filter(book => book.bookId !== bookId);

        // –ï—Å–ª–∏ –¥–ª–∏–Ω–∞ –º–∞—Å—Å–∏–≤–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –∫–Ω–∏–≥–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞
        if (userBooks.books.length === initialCount) {
        return res
            .status(404)
            .json({ message: "‚ùå –ö–Ω–∏–≥–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º bookId –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        await userBooks.save();
        res.status(200).json({ message: "‚úÖ –ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞" })
    }
    catch (error) {
        res.status(500).json({ message: "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
    }
})
module.exports = router;