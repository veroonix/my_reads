import { useState, useEffect } from 'react';
import { fetchWithAuth } from '../utils/authFetch';

function useUserBooks() {
  const [userBooks, setUserBooks] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–Ω–∏–≥
  useEffect(() => {
    const fetchUserBooks = async () => {
      try {
        setLoading(true);
        const response = await fetchWithAuth("/api/books/get");
        if (response) setUserBooks(response);
      } catch (error) {
        setError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—à–∏ –∫–Ω–∏–≥–∏");
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–Ω–∏–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
      } finally {
        setLoading(false);
      }
    };
    
    fetchUserBooks();
  }, []);

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏
  const addBook = async (bookId, bookData, status) => {
    try {
      await fetchWithAuth("/api/books/add", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ 
          bookId,
          title: bookData.title,
          cover: bookData.imageLinks?.thumbnail,
          status
        })
      });
      
      setUserBooks(prev => updateLocalBooks(prev, bookId, bookData, status));
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏:", error);
      throw error;
    }
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–Ω–∏–≥–∏
  const updateBookStatus = async (bookId, newStatus) => {
    try {
      await fetchWithAuth("/api/books/update", {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ bookId, status: newStatus })
      });
      
      setUserBooks(prev => 
        prev.map(book => 
          book.bookId === bookId ? { ...book, status: newStatus } : book
        )
      );
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:", error);
      throw error;
    }
  };

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const updateLocalBooks = (prevBooks, bookId, bookData, status) => {
    const existingIndex = prevBooks.findIndex(b => b.bookId === bookId);
    return existingIndex >= 0
      ? prevBooks.map(b => b.bookId === bookId ? { ...b, status } : b)
      : [...prevBooks, { 
          bookId, 
          title: bookData.title,
          cover: bookData.imageLinks?.thumbnail,
          authors: bookData.authors?.join(', '),
          status 
        }];
  };

 // üìå –î–æ–±–∞–≤—å—Ç–µ –≤ —Ö—É–∫ useUserBooks
  const deleteBook = async (bookId) => {
    try {
      await fetchWithAuth("/api/books/delete", {
        method: "DELETE",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ bookId })
      });
    
      setUserBooks(prev => 
      prev.filter(book => book.bookId !== bookId)
    );
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏:", error);
      throw error;
    }
};

  return { 
    userBooks, 
    loading, 
    error, 
    addBook, 
    updateBookStatus,
    deleteBook // –î–æ–±–∞–≤–ª—è–µ–º –≤ —ç–∫—Å–ø–æ—Ä—Ç
  };
}

export default useUserBooks;